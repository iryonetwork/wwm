swagger: '2.0'

info:
  title: IRYO reports files storage API
  version: '1.0'

host: iryo.cloud
schemes:
  - https
basePath: /reports
consumes:
  - application/json
produces:
  - application/json; charset=utf-8

securityDefinitions:
  token:
    type: apiKey
    name: Authorization
    in: header

security:
  - token: []

paths:
  /{reportType}:
    get:
      summary: Lists all reports files of given type available
      description: Lists all reports files of given type available
      operationId: reportList

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

      responses:
        200:
          description: List of report files
          schema:
            type: array
            items:
              $ref: '#/definitions/ReportFileDescriptor'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    post:
      summary: Uploads a new report file and returns filename.
      description: Uploads a new report file and returns filename
      operationId: reportNew
      consumes:
        - multipart/form-data

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: formData
          name: file
          description: Contents of the new file
          required: true
          type: file

        - in: formData
          name: contentType
          description: File's content type
          required: true
          type: string

        - in: formData
          name: dataUntil
          description: Report creation time
          required: true
          type: string
          format: datetime

        - in: formData
          name: dataSince
          description: If report covers limited timeframe dataSince indicates starting point
          required: false
          type: string
          format: datetime

      responses:
        201:
          description: Report created
          schema:
            $ref: '#/definitions/ReportFileDescriptor'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{reportType}/{fileName}:
    get:
      summary: Fetch a report file
      description: Fetches the latest revision of a report file.
      operationId: reportGet
      produces:
        - application/octet-stream

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: path
          name: fileName
          description: File name
          type: string
          required: true

      responses:
        200:
          description: Report file found
          schema:
            type: file
          headers:
            X-Content-Type:
              type: string
              description: Content type of the file
            X-Created:
              type: string
              format: datetime
              description: Date and time of file creation
            X-Checksum:
              type: string
              description: File's SHA256 checksum
            X-Version:
              type: string
              description: File's version
            X-Name:
              type: string
              description: File's name
            X-Path:
              type: string
              description: File's full path
            X-ReportType:
              type: string
              description: Report type
            X-DataSince:
              type: string
              format: datetime
              description: Date and time of start of report coverage
            X-DataUntil:
              type: string
              format: datetime
              description: Date and time of end of report coverage

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    put:
      summary: Updates a report file
      description: Creates a new version of a report file
      operationId: reportUpdate
      consumes:
        - multipart/form-data

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: path
          name: fileName
          type: string
          required: true

        - in: formData
          name: file
          description: Contents of the new file
          required: true
          type: file

        - in: formData
          name: contentType
          description: File's content type
          required: true
          type: string

      responses:
        201:
          description: Report file created
          schema:
            $ref: '#/definitions/ReportFileDescriptor'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      summary: Marks report file as deleted
      description: Deletes the report file
      operationId: reportDelete

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: path
          name: fileName
          description: File name
          type: string
          required: true

      responses:
        204:
          description: Report file deleted

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{reportType}/{fileName}/versions:
    get:
      summary: List of versions of a report file
      description: Returns a list of available report file versions.
      operationId: reportListVersions

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: path
          name: fileName
          description: File name
          type: string
          required: true

      responses:
        200:
          description: List of versions
          schema:
            type: array
            items:
              $ref: '#/definitions/ReportFileDescriptor'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{reportType}/{fileName}/{version}:
    get:
      summary: Get a specific version of a report file.
      description: Returns a specific version of a report file.  Report type can be used instead of fileName to fetch list of versions of report type files collection file.
      operationId: reportGetVersion
      produces:
        - application/octet-stream

      parameters:
        - in: path
          name: reportType
          type: string
          required: true

        - in: path
          name: fileName
          description: File name
          type: string
          required: true

        - in: path
          name: version
          description: Version of a file
          type: string
          required: true

      responses:
        200:
          description: Report file found
          schema:
            type: file
          headers:
            X-Content-Type:
              type: string
              description: Content type of the file
            X-Created:
              type: string
              format: datetime
              description: Date and time of file creation
            X-Checksum:
              type: string
              description: File's SHA256 checksum
            X-Version:
              type: string
              description: File's version
            X-Name:
              type: string
              description: File's name
            X-Path:
              type: string
              description: File's full path
            X-ReportType:
              type: string
              description: Report type
            X-DataSince:
              type: string
              format: datetime
              description: Date and time of start of report coverage
            X-DataUntil:
              type: string
              format: datetime
              description: Date and time of end of report coverage

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

definitions:
  ReportFileDescriptor:
    type: object
    properties:
      name:
        type: string
        description: Name of the file
        example: MjAxOC0wMS0wOVQxMzoxMDowN1ovMjAxOC0wNS0wOVQxMzoxMDowN1o=
      reportType:
        type: string
        description: Report type
      dataSince:
        type: string
        description: Date and time of start of report coverage
        format: datetime
        example: '2018-01-09T13:10:07Z'
      dataUntil:
        type: string
        description: Date and time of end of report coverage
        format: datetime
        example: '2018-05-09T13:10:07Z'
      version:
        type: string
        description: Version of the file
        example: 5925047a-7ec6-4e94-9639-00fd3d1c4b38
      created:
        type: string
        description: Date and time when document was created
        format: datetime
        example: '2018-01-09T13:10:07Z'
      checksum:
        type: string
        description: SHA256 checksum of the file
        example: ebbdb16fccec8eec261e64e12546701dee1fc2a6
      path:
        type: string
        description: Pull path of the file
      contentType:
        type: string
        description: Content type of the file.
        example: text/csv
      size:
        type: integer
        description: Size of file in bytes
        example: 1025
      operation:
        type: string
        enum: [w, d]
  File:
    type: string
    format: binary

  NewFileRequest:
    type: object
    properties:
      file:
        type: string
        description: base64 encoded file contents

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string


responses:
  400:
    description: Request is badly formatted
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: bad_request
        message: Request is badly formatted

  401:
    description: Unauthorized Access
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: unauthorized
        message: Unauthorized Access

  403:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: forbiden
        message: You do not have permissions to do this

  404:
    description: Required entity cannot be found
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: not_found
        message: Required entity cannot be found

  409:
    description: Conflict with current state of the entity
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: conflict
        message: Conflict with current state of the entity

  500:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: internal_error
        message: Internal server error
