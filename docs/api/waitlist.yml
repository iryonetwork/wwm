swagger: '2.0'

info:
  title: IRYO waitlist API
  version: '1.0'

host: iryo.local
schemes:
  - https
basePath: /waitlist
consumes:
  - application/json
produces:
  - application/json; charset=utf-8

securityDefinitions:
  token:
    type: apiKey
    name: Authorization
    in: header

security:
  - token: []

paths:
  /:
    get:
      tags:
        - waitlist

      summary: Waitlists
      description: Lists all waiting lists

      responses:
        200:
          description: List of waitlists
          schema:
            type: array
            items:
              $ref: '#/definitions/List'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        500:
          $ref: '#/responses/500'

    post:
      tags:
        - waitlist

      parameters:
        - in: body
          name: list
          required: true
          schema:
            $ref: '#/definitions/List'

      summary: Create waitlist
      description: Create a new waitlist

      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/List'

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        500:
          $ref: '#/responses/500'


  /{listID}:
    get:
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

      summary: Waitlist
      description: Lists all people in the waiting list ordered by priority and time.

      responses:
        200:
          description: Waitlist
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    post:
      tags:
        - item
      summary: Create waitlist item
      description: Add new patient to the waitlist

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: body
          name: item
          required: true
          schema:
            $ref: '#/definitions/Item'

      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Item'

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        409:
          $ref: '#/responses/409'

        500:
          $ref: '#/responses/500'


    put:
      tags:
        - waitlist

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: body
          name: list
          required: true
          schema:
            $ref: '#/definitions/List'

      summary: Update waitlist
      description: Update waitlist metadata

      responses:
        204:
          description: List was updated

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      tags:
        - waitlist

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

      summary: Delete waitlist

      responses:
        204:
          description: Deleted

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{listID}/history:
    get:
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid
        - in: query
          name: reason
          type: string
          enum:
            - finished
            - canceled

      summary: Waitlist
      description: Returns all the already closed or removed items from the waitlist, result can be filtered by reason.

      responses:
        200:
          description: Waitlist items
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{listID}/{itemID}:
    put:
      summary: Updates item on the waitlist
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: path
          name: itemID
          required: true
          type: string
          format: uuid

        - in: body
          name: item
          required: true
          schema:
            $ref: '#/definitions/Item'

      responses:
        204:
          description: Item was updated

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      summary: Remove item from list
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: path
          name: itemID
          required: true
          type: string
          format: uuid

        - in: query
          name: reason
          required: true
          type: string
          enum:
            - finished
            - canceled

      responses:
        204:
          description: Deleted

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{listID}/{itemID}/top:
    put:
      summary: Puts item on the top of the waitlist
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: path
          name: itemID
          required: true
          type: string
          format: uuid

      responses:
        204:
          description: Item was updated

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /{listID}/{itemID}/reopen:
    put:
      summary: Reopens waitlist item that was closed or removed, ID of the list to which reopened item should be put can be specified.
      tags:
        - item

      parameters:
        - in: path
          name: listID
          required: true
          type: string
          format: uuid

        - in: path
          name: itemID
          required: true
          type: string
          format: uuid

        - in: query
          name: newListID
          type: string
          format: uuid

      responses:
        204:
          description: Item was updated

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /patient/{patientID}:
    put:
      summary: Updates patient data in all the items with this patient.
      tags:
        - item

      parameters:
        - in: path
          name: patientID
          required: true
          type: string
          format: uuid

        - in: body
          name: patient
          required: true
          schema:
            $ref: '#/definitions/Patient'

      responses:
        204:
          description: Items were updated

        400:
          $ref: '#/responses/400'

        401:
          $ref: '#/responses/401'

        403:
          $ref: '#/responses/403'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'


definitions:
  List:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Items UUID
        readOnly: true
        example: 1bdf4870-00b1-4f00-b3b1-e4758f5c7c03
      name:
        type: string
        description: Waitlist name
        example: Room 1
      added:
        type: string
        description: Date and time when waitlist was created
        format: datetime
        example: '2018-01-09T13:10:07Z'
        readOnly: true
      closed:
        type: string
        description: Date and time when waitlist was deleted
        format: datetime
        example: '2018-01-09T13:18:07Z'
        readOnly: true

  Item:
    type: object
    required:
      - patientID
      - priority
    properties:
      id:
        type: string
        description: Items UUID
        readOnly: true
        example: 1bdf4870-00b1-4f00-b3b1-e4758f5c7c03
      patientID:
        type: string
        description: Patients UUID
        example: 6a0b7d41-b2d9-4fee-9296-7d678186396d
      patient:
        $ref: '#/definitions/Patient'
      priority:
        type: integer
        description: Priority to treat patient (1=urgent, 2, 3, 4=normal)
        default: 4
        example: 4
      priorityQueue:
        type: integer
        readOnly: true
        description: Priority quueue on which item is, the same as priority unless item was moved to be on top.
        default: 4
        example: 4
      status:
        type: string
        description: Status of patient in waitlist
        readOnly: true
        enum:
          - waiting
          - finished
          - canceled
        default: waiting
        example: waiting
      mainComplaint:
        $ref: '#/definitions/Complaint'
        description: Patient's main complaint
      diagnoses:
        type: array
        items:
          $ref: '#/definitions/Diagnosis'
      vitalSigns:
        type: object
        additionalProperties: {}
      added:
        type: string
        description: Date and time when patient was added to waitlist
        format: datetime
        example: '2018-01-09T13:10:07Z'
        readOnly: true
      finished:
        type: string
        description: Date and time when patient was removed from waitlist
        format: datetime
        example: '2018-01-09T13:18:07Z'
        readOnly: true

  Patient:
    description: Collection of key-value pairs with patient data.
    type: array
    readOnly: true
    items:
      $ref: '#/definitions/PatientData'

  PatientData:
    type: object
    properties:
      key:
        type: string
      value:
        type: string

  Complaint:
    description: Object describing patient's complaint
    type: object
    properties:
      complaint:
        type: string
        description: Patinet's complaint
        example: Sore throat
      comment:
        type: string
        description: Additional comment to patient's complaint
        example: Visible flushes on the skin

  Diagnosis:
    description: Object describing diagnosis
    type: object
    properties:
      diagnosis:
        type: string
        description: Diagnosis identifier
      label:
        type: string
        description: Diagnosis text
      comment:
        type: string
        description: Additional diagnosis comment
      therapies:
        type: array
        items:
          $ref: '#/definitions/Therapy'

  Therapy:
    description: Object describing therapy
    type: object
    properties:
      medicine:
        type: string
        description: Medicine identifier
      instructions:
        type: string
        description: Instructions for the therapy

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string


responses:
  400:
    description: Request is badly formatted
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: bad_request
        message: Request is badly formatted

  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: unauthorized
        message: Unauthorized

  403:
    description: Forbiden
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: forbiden
        message: You do not have permissions to do this

  404:
    description: Required entity cannot be found
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: not_found
        message: Required entity cannot be found

  409:
    description: Entity already exists.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: conflict
        message: Waitlist already contains item with provided patientID

  500:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: internal_error
        message: Internal server error
