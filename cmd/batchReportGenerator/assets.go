// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/encountersReportSpec.json
// assets/patientsReportSpec.json

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsEncountersReportSpecjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xed\x4e\xe3\x38\x14\xfd\xcf\x53\x58\x95\x90\x58\x69\x66\x28\x30" +
	"\x3b\x2b\xf5\x1f\x50\x56\x8d\xb4\x05\xc4\xc7\xec\x0f\x84\x22\x37\xb9\x6d\xac\xf5\x47\xc6\xbe\x61\xa9\x06\xde\x69" +
	"\x9f\x61\x9f\x6c\x65\xb7\x4d\xe3\x7c\xd0\x42\xa8\x60\x35\x53\x09\xa4\x5c\xdf\x1e\x1f\x9f\x7b\x72\x9d\xb8\xdf\xb7" +
	"\x08\x21\xa4\x83\xd3\x14\x3a\x3d\xd2\x01\x19\xa9\x4c\x22\x68\xd3\xf9\x30\x1b\x19\x33\x0e\xc7\x14\x61\xa2\xf4\xd4" +
	"\x66\xa8\x14\x24\x24\xba\xd7\xfb\x7c\x70\xf0\x00\x77\x20\xf1\x61\x91\xca\x64\xc4\xb3\x18\x0e\x39\xef\xf4\xc8\x98" +
	"\x72\x03\xf3\x81\x48\xf1\x4c\x48\xd3\xe9\x91\x1b\x17\x70\xc1\x93\xc5\x54\x24\xe8\xcf\x11\x5c\xfc\x9c\x22\x03\x89" +
	"\xa5\xe8\x31\x67\x92\x45\xa5\xe0\x12\x02\x99\x80\xe2\xc8\x61\x86\x89\x2a\x23\xcf\x83\x92\xfa\xb9\x43\xca\x24\x89" +
	"\x94\x48\x39\x65\x12\x2b\x23\x31\xa3\x13\xa9\x0c\x33\x1e\x1d\x9b\x0e\x02\x24\x52\x3d\x5d\xa4\x80\x97\x32\x84\x98" +
	"\x45\x14\x99\x92\x5e\xf8\x4f\x60\x93\xc4\x9b\x65\x50\x89\x1c\x0d\x03\xef\x52\xc5\x53\x82\x20\x52\xd0\x14\x33\xed" +
	"\x91\xbf\x9c\x1a\x54\x9c\x45\x64\xc4\x95\x8a\x49\xaa\xc1\x98\x52\x4a\x9f\xd1\x95\x39\x03\xa0\x1a\x89\xa6\xe8\x45" +
	"\xcf\xee\xa7\x13\x90\xc4\xd8\x59\xdd\x4a\x3a\x6e\xec\xd6\x2f\xeb\x65\x0a\x91\xad\xed\xf7\x86\xda\x16\x47\x3c\xb3" +
	"\x59\x6b\x0d\x01\x69\x61\x4a\x37\x1e\x83\x89\x34\x4b\xdd\x84\x3d\xd2\xb9\x96\xec\x5b\x06\x24\xb7\x26\xb1\xdf\x23" +
	"\x2c\x06\x89\x6c\xcc\x40\x97\xbf\x2e\x00\xe9\xef\x0c\x78\xbc\x98\x23\xe8\x77\xf2\x8c\xc7\x7a\xa7\xbd\x12\xc7\x74" +
	"\x8e\xb8\x26\xb9\x79\x7a\x13\xbf\xa5\xe7\x1b\xe9\xdd\x51\x9e\xc1\x0a\x6e\x73\x98\x66\x4e\x90\xe8\x73\x8a\x89\xcd" +
	"\xdd\x8d\x94\x44\xb8\xc7\xdd\x04\x28\xc7\x24\x8c\xa8\x86\x70\x4c\x23\xc6\x19\x4e\x1f\x0a\x10\xb5\x84\x4b\xf7\x63" +
	"\x2b\xd6\x57\x4c\x00\x51\xe3\x65\xd9\xd7\x61\x0d\x32\x0e\xdd\xd4\xb5\xf4\x96\x4d\xa1\x15\xb3\xa0\x6f\x79\x61\x02" +
	"\x24\x33\x76\xa9\x09\x45\x12\x69\xa0\x08\xb1\x8b\xfa\x46\x7d\x9a\xb6\x48\x95\x01\xbd\x52\xd8\x62\xe7\x6a\xc5\xfd" +
	"\x94\xce\x54\x7d\x55\xf6\x8e\x56\x2d\xef\x52\x6b\x6d\x45\xbd\xb1\x4d\xfb\xc4\xbc\xb0\x1b\x9a\xb9\x43\xe2\x8d\xdd" +
	"\xba\x4e\x06\x17\x1f\xed\xdf\xf1\xd9\xf0\xfc\xec\x32\xb8\x0a\xce\x4e\x3f\xe5\x4b\xfe\x74\xb7\x77\x9b\x7b\x49\x61" +
	"\x02\x3a\x5c\x5c\x31\x04\x61\x3c\x84\x93\xaf\x87\x7f\x5c\x1f\x3a\x80\x9c\x95\x03\x98\xa5\x52\xec\x76\xbb\xf3\xab" +
	"\xd9\xc5\xfe\xed\x13\x22\x2d\x77\x99\x46\x91\xa8\xd6\x74\xba\x8e\x48\x39\x16\xd9\x19\x33\x6d\xb0\x10\x60\xd2\x15" +
	"\xd9\x41\x59\x1f\xe4\x3b\xd7\x2f\x2b\x6f\xaf\x4d\x0a\x98\x6a\x35\xe2\x20\xc2\x9c\xa8\x05\x2a\x33\x9a\x3f\x5e\x04" +
	"\x16\xa8\xa2\x92\xcb\x30\x48\xb5\x75\x59\xf7\x43\x75\x0c\xa4\x6d\xb9\x5d\x6f\xe0\xb1\x34\xc3\x58\x69\x41\x2d\x40" +
	"\x67\xdb\x90\x9d\x6d\xd3\x23\xdb\x55\x61\x52\xad\x52\xd0\xc8\xc0\x7f\x9e\x59\x7c\xaa\xb4\xea\xea\xd4\xcf\x2b\xc2" +
	"\xe9\x08\x78\xa7\x4a\x98\xac\xba\x3f\x6a\x2b\x15\x53\xa4\x6b\x19\xb0\x41\x82\x97\xac\x20\xe8\x13\x04\x2d\x98\x54" +
	"\x5c\x4d\xca\x06\xdd\xd8\x52\x76\x43\x41\xd3\x94\xc9\x49\xaf\xbb\x8b\x54\x4f\x00\x1f\x8a\x2c\x36\xb3\xd0\x37\x5c" +
	"\x5c\xa4\x62\xa8\x59\x95\x17\xb9\xad\x7f\x8c\x68\x78\x56\x6d\xd5\x68\x1a\x40\xc9\x0e\xe5\x9c\x8c\x32\x24\x5e\xe7" +
	"\x81\x1f\xa5\xf3\xec\x35\x76\x9e\x8f\x7b\x3f\x5b\x8f\xff\xf9\xd9\x7a\x9e\xb3\xd0\xff\x65\xeb\x29\xbe\x03\xb7\x6a" +
	"\x37\xe7\xda\x5d\x8f\x20\x26\xa2\xf6\xbd\xba\xb2\xcc\xcd\x74\x8e\xe0\xf4\xf2\xea\xe2\xfa\xd8\x21\x2c\x89\x84\x4a" +
	"\xc7\x16\x68\x7f\x23\xcf\x2c\xcf\xe8\x1c\x1b\x69\x18\xcb\x22\xbe\x9a\x07\x69\x84\xec\x8e\x59\x5e\xb9\x07\x0b\x93" +
	"\xe6\x56\x5c\xba\xf4\xb7\x6e\x5d\x03\x59\xc3\x81\xf3\xe3\x96\x46\xf3\x7d\xcb\xa8\x44\x86\xab\xfc\x37\x83\x21\x02" +
	"\xa8\xc9\x34\xc4\x24\xce\x34\x93\x93\xe6\x97\xd3\x4c\x32\x57\x92\xbf\x26\x6f\xff\xa2\x72\x76\x74\x79\x72\xf1\x75" +
	"\xb6\xdd\x8d\x54\x3c\x0d\xff\x76\x8b\xb1\x76\x75\xcd\x20\x97\xdb\x9d\xe6\xcd\x2b\x72\x70\xdb\xeb\x16\x46\xfd\xd7" +
	"\x9a\xcf\x0d\x6f\x32\x83\xd7\x11\x7b\xf0\x42\xb1\x23\xf1\xbe\xc4\x4e\xea\x74\xde\xf3\x75\xde\xf7\x75\x3e\x58\x4b" +
	"\xe7\xa3\x61\xd0\x5a\xe4\xa3\x61\xf0\x12\x3b\xef\x8a\xfd\xf7\x25\xb2\x73\xb4\xa0\xc6\x84\x4c\xc6\x70\xbf\x09\xb5" +
	"\xcb\xc7\xaf\xad\xa5\x5f\x02\x02\x45\x9d\xc1\xfa\x85\x30\x2a\xd3\x91\x9b\xab\x4f\xab\x87\x92\x8b\x32\xfd\xfb\xcf" +
	"\xf1\x3b\x2c\x52\x41\xc2\x0d\xf4\x9e\xa6\x83\xf0\xb6\xc5\x6a\xc0\x25\xb5\x47\x56\x8b\x02\x08\x71\x33\x98\x54\x1e" +
	"\x06\xde\xb8\x06\x96\x7f\xb8\xe0\xef\x60\x1a\xef\x93\x2f\x2f\xb9\x4f\x1a\x7f\x67\x68\x5b\x82\x26\xe0\x1f\xb8\x06" +
	"\xbf\x36\xee\xc0\xf9\xef\x38\xed\x77\xe1\x05\xd4\xf3\xf7\x89\x51\xfa\xce\xb6\xe2\x34\xe3\xa6\xac\xf7\x6b\x74\x9d" +
	"\xea\x2f\x64\x6d\x65\xaf\x20\x3e\x5f\xfd\xed\x77\xa8\x7d\xa8\xee\x99\x00\xd4\xd3\xa7\x4d\xff\xe4\x06\xfd\xa5\x58" +
	"\x84\xad\xd9\xff\xc7\xad\xff\x02\x00\x00\xff\xff\x31\xf7\xf7\xd3\xc2\x1e\x00\x00")

func bindataAssetsEncountersReportSpecjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsEncountersReportSpecjson,
		"assets/encountersReportSpec.json",
	)
}



func bindataAssetsEncountersReportSpecjson() (*asset, error) {
	bytes, err := bindataAssetsEncountersReportSpecjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/encountersReportSpec.json",
		size: 7874,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533908833, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsPatientsReportSpecjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xef\x5f\x41\x18\x58\xf4\xfb\x05\xb6\xa9" +
	"\x9d\xdf\xcd\x4b\x91\xd6\xde\xc6\x0f\x69\x83\x24\xb7\x8b\x43\x11\x04\x34\x35\xb6\x78\x91\x48\x95\xa4\x9c\xf3\x6d" +
	"\xfb\xbf\x1f\x28\xc9\x1b\x51\xe2\x58\xae\x65\x39\xed\xe2\x1e\x76\x01\x93\x0c\x39\x9f\x0f\x87\x33\xe4\x68\xa6\x7f" +
	"\xbe\x20\x84\x90\x9e\x59\x24\xd0\x3b\x23\xbd\x84\x1a\x0e\xc2\xe8\xde\xaf\x79\xfb\x94\x47\xf0\x9e\x1a\x98\x49\xb5" +
	"\xb0\xfd\x32\x01\x01\xa1\x3a\x3b\x3b\x3c\x18\x7c\x4d\x40\x69\xae\x0d\x08\xf3\x75\x39\x9e\x0b\x16\xa5\x01\x9c\x47" +
	"\x51\xef\x8c\x18\x95\x42\xd1\x3e\x53\x32\x4d\xde\x2d\xae\xf2\xe9\xc7\x43\xb7\x97\xc9\x28\x8d\x85\xee\x9d\x91\xcf" +
	"\x59\x43\xd6\x58\x8c\x25\xe3\x61\x31\x79\xd6\xfa\x3e\xe2\x82\xb3\x4a\xe3\x79\x6a\x42\xa9\xfc\x8d\x82\xc6\x50\x6e" +
	"\xfe\x27\x50\x45\xe4\x94\x4c\xb8\x32\xa1\x33\xb3\x4c\x85\x51\x0b\x6f\xdf\x47\x6a\xb8\x14\x34\xe2\x66\x51\x6e\xfe" +
	"\x00\x22\x00\x55\x6e\xb9\xa4\xca\x70\x1a\x11\x6d\xa8\x49\x75\xb9\x67\x14\xa4\x2c\x9b\xa5\xdc\xf8\x89\xb1\x34\xa9" +
	"\xb5\x96\x24\x91\x8a\xcf\xb8\xd3\x39\xa4\x06\x6c\x4f\x04\x74\xce\xc5\x8c\x84\x32\x06\xc2\xf2\xbf\xf0\x8d\xa3\x4a" +
	"\xf1\x39\x8d\xca\x5d\xb7\x8a\x0a\xcd\x4d\xf1\x57\x1c\xb4\x67\xf1\x72\xd3\x35\xcc\xaa\x12\x86\x4a\xda\x6d\x08\xb8" +
	"\x06\xaa\xdd\x09\xc6\x71\x9c\x0a\xfe\x9f\x0c\x95\xd3\x71\x1e\x45\xa0\x66\x95\xe5\x6e\x52\x35\x83\xaa\x0c\x97\x10" +
	"\x70\x56\x9f\xe0\x63\x1a\x4f\x20\xdb\xbc\x04\x64\x12\x01\x89\x78\x46\x81\x91\x33\x30\xa1\xbb\x11\xb5\xb1\x5c\x10" +
	"\x13\x02\x99\xd2\x98\x47\x0e\xba\x9b\x58\x3e\x70\x31\xf3\x34\x11\x26\xe3\x18\x84\x71\xb8\xa3\x59\x4f\xa0\xd2\x99" +
	"\x23\xdb\x05\xd5\x64\x42\x35\x67\x24\x5c\xcc\x38\x08\x20\x0a\xb4\x4c\x15\x73\x91\x9d\x33\x06\x5a\x13\x23\x09\x8b" +
	"\x80\x0a\xf2\x48\x8d\x2b\xf7\x4d\x3a\x9d\x72\x96\x29\xfe\x54\xca\x80\xe8\x34\x49\x5c\x79\x3f\xd8\x66\x9a\x24\x60" +
	"\xb8\x71\x34\xfb\x02\xa8\xa9\x00\x19\x45\xc0\x8c\xe2\xac\xa2\xb7\xbf\x53\xc6\xb8\xc8\x08\x26\x52\x10\xcd\x42\x08" +
	"\xd2\x08\x08\x35\x99\x3a\x61\x43\x03\xc9\x52\xcb\x87\x26\x74\x4e\x79\x44\x27\x91\x33\xf4\x16\xb4\x81\x80\x4c\xa5" +
	"\x22\x26\x9d\x80\x62\x69\x24\x35\x77\xe0\xdf\x96\xda\x89\x01\x6d\x2c\x4b\x69\xe4\x30\x7c\x1e\x04\x3c\x3f\x6d\xce" +
	"\x34\xd9\x70\x4d\x02\x29\x3c\xf2\x59\xb6\x29\xcb\x14\x86\xf0\x00\x84\xe1\x53\x0e\xc1\xea\x71\x01\x18\xca\x23\x47" +
	"\xbc\x77\x74\xb2\x78\x69\x7b\x22\x3e\x07\xb5\x20\x99\x55\x2c\xf5\x5f\x29\x88\xa9\x49\x15\xd4\x2d\xc4\x1f\x00\x0f" +
	"\xda\x12\xe8\xe9\xe1\xb3\xd0\x78\xbb\x2e\xf0\xae\x77\x0a\xa8\x36\x53\x80\xa0\xb2\xa5\x4e\x07\x09\x52\x55\x33\x1f" +
	"\x7f\x84\xd4\x90\x40\x82\x55\xc8\xc9\x82\x00\x35\x84\x8a\x80\x04\x8a\x8b\x87\xb7\xe5\x81\xbf\x29\xf8\x92\x82\x60" +
	"\xb9\xcd\x93\x8f\x10\x91\x58\xce\x21\x2e\x39\x80\x32\x2d\x3a\x02\x48\x88\xa6\x86\xeb\x69\x4e\xa2\x67\xd0\xef\xdc" +
	"\xd0\x98\x0b\x32\xcc\x35\x37\x9b\xac\x26\xa1\x1d\x9b\x4f\x67\x31\x48\x41\x26\x94\x3d\x38\xc6\xcb\x4a\x4f\xc5\x62" +
	"\x22\x83\xc5\x52\x2b\x89\x8e\xe5\x03\xbc\xf5\x1f\xf2\xac\x4f\xb9\x27\x52\x3e\xe6\x2c\xb0\x90\x47\x01\x99\x81\x21" +
	"\x54\xc9\x54\x04\x6f\x57\x8c\xb2\x27\x3e\x15\xd6\xf8\xc0\xdb\x5e\x36\xea\xce\xf5\x51\x37\x09\x30\xeb\xa8\xfe\xf4" +
	"\x3a\xaa\x72\x3b\x29\xfb\x55\xeb\x47\x2f\xc1\xd0\xd2\xd2\x59\x7f\x00\x9a\x29\x9e\x64\x04\x9d\x91\xde\x3f\x04\xff" +
	"\x92\x02\x29\xbc\xf0\x93\x2a\xab\xea\xdf\xc5\x60\xe8\x6f\x1c\xa2\xa0\xe4\xb4\xc7\xc3\xde\x5f\x83\xbe\x79\x5d\x26" +
	"\x2a\xde\x9c\x46\x29\x34\xc8\x56\x4c\x83\xcb\x04\xa1\xba\xa2\x26\xb4\x63\x5f\x33\x29\x0c\xfc\xdb\xbc\x0e\x81\x46" +
	"\x26\xbc\x67\x54\xc1\xfd\x94\x32\x6e\x3d\xe8\xd7\xd2\x14\x5e\x81\x9f\xdc\x79\x2b\x81\xc7\x43\xab\x19\xd6\xe8\xa7" +
	"\x1a\x14\x31\xf6\x58\x30\x05\xd4\x1a\x29\xdb\x0a\x22\x73\x80\xa0\x88\xdd\x9d\xd5\x68\xe2\x44\x6a\x50\xeb\x4a\x9e" +
	"\xdd\x39\x5a\xc9\xfe\x91\xc6\xb0\x75\xe9\x33\xb1\xbc\x72\xbb\x97\xa2\x56\x92\x63\xf7\x2b\xbf\x8a\x08\xf3\xd9\x5e" +
	"\x29\x47\x17\xd7\xaf\x86\xa3\xcb\x4f\x1f\xae\xcf\xaf\x2e\xc6\xef\x5f\x5d\x8d\xae\x6f\x3e\x7d\xdc\xb3\x17\x4c\x29" +
	"\xf6\xe6\x83\xbb\xd7\x85\xb5\xf6\x8e\x1e\xdf\x8e\x2e\xef\x6f\xaf\x47\xa3\xe2\x0f\xee\x8b\xc1\x7b\xf3\xc1\x5e\x7f" +
	"\xaf\x7f\xf7\x9a\x1b\x88\xf5\x67\x6a\xfa\xfd\x41\xff\x0e\x39\x24\xd5\xdb\x1f\x4a\x02\x93\x41\xe3\x51\xc1\xaf\x92" +
	"\x3f\x08\x0d\xfb\x08\x0d\xe5\x8b\x6e\x1b\x06\xfc\x17\xe6\x46\xf0\xf6\xbf\x12\x8c\xdc\xae\xdd\x73\x31\x95\x7b\x73" +
	"\x07\xc0\xf1\x7e\xf9\xd7\xe1\x29\x02\xa7\xb8\xa0\xb7\x41\x52\xbb\xe3\xff\x20\x3b\x78\x82\x40\xae\xbc\x40\xda\x40" +
	"\x47\x1f\x33\x3f\x06\x05\x07\x07\xff\xdb\xf5\xa5\x64\x4f\xaf\xcb\x36\xa8\x7d\x6f\xd4\x46\xe0\x1b\x9e\xd9\x23\xcc" +
	"\x12\x97\xde\xc4\xad\x1c\x91\xf7\x6d\xdd\x19\x1a\xcc\x02\xd5\xdf\xf2\x5b\x72\x2c\xb5\xc8\x40\x57\xd0\x0e\xdf\x20" +
	"\xd0\x56\x46\x22\x5a\x6d\xdd\x9a\x31\x8e\xce\x36\xb3\x09\xf1\x32\xa6\xb2\x15\x90\xf5\x00\x4d\x57\xb8\x8e\x07\x08" +
	"\xae\x7a\x40\xa8\x15\xb2\x55\xf1\xa5\xce\xb0\x35\x5c\xec\xb6\x71\xec\x50\x18\x4e\x73\xd6\xf5\x9d\xee\xc1\x8e\xa6" +
	"\xcc\xf8\xfd\xc3\xf9\x70\x78\x3d\xba\xb9\xd9\xa3\x41\xa0\x40\x5b\xb7\x70\x77\xd6\xff\xcb\xa3\x58\xf0\xfd\x41\x99" +
	"\x8a\xbe\x43\x4c\x1f\x53\xe6\x22\xaa\xd7\x6a\xa7\x6b\x91\xc1\xc6\xed\xdd\x25\x0f\xd8\xfd\xa0\x31\x8e\xd8\xee\xe9" +
	"\x56\x9b\xbd\xb0\x62\x9e\x30\x65\x47\xa7\x61\xd0\xc7\x4e\x43\x43\x58\x74\xbb\xc0\xb1\x90\x6b\x67\xa8\x51\x27\x5c" +
	"\x0d\x57\xa3\x38\xa9\x52\xb4\x26\x6a\xd5\x1a\xe0\xc1\xef\xed\x21\x1b\x1c\xdd\x55\xe7\x2d\xbe\xad\x8c\xed\x98\x1a" +
	"\x82\x6c\x84\x36\x54\x99\xde\x19\xe9\xff\x5a\xef\x03\x11\xf4\xce\xc8\xab\x81\xd3\xf3\xad\xb2\xc4\x54\xaa\x98\xda" +
	"\x19\x7a\xbf\x68\xf2\x7f\xbf\xe8\xff\xaf\xca\x90\x28\x99\x80\x32\xb9\x8b\xf8\x5c\x5b\xa5\x2e\x93\x8f\xc0\x61\x4e" +
	"\x5c\xaf\x2e\x25\x69\xd2\x39\x2f\xc9\x25\xd6\xca\x1a\x80\x80\xfc\x0e\x39\xa9\xe9\x44\xc8\x13\x9f\x90\x4e\xcb\x9d" +
	"\x57\x8d\xdd\x2f\x2b\xad\x74\x18\xfb\x48\x53\x13\x7b\x73\x05\x3e\xfc\xfb\x2a\x70\x99\xbd\x2e\x14\xe4\xcd\x4f\xa0" +
	"\xc5\xfb\x83\x0d\xb5\xf8\xe9\x33\x60\x2b\x0d\xf6\x7d\x4d\xac\x89\xbb\xb1\xf6\xda\x5b\xd3\xf3\x6a\x6f\x27\x8a\x9b" +
	"\x93\x56\xa5\xb6\xc6\xff\x26\x3a\xdb\xdf\xd4\xa8\x89\x7f\xa5\xab\x9f\x1c\x6b\xd9\xb3\xe5\x2c\x5d\x28\xc3\xfe\xfe" +
	"\x73\x2b\x43\x87\xa6\xcc\x12\xd7\x85\x42\xec\x1f\xfc\x0c\x46\xec\x70\x43\xad\x7d\x4a\x5b\x68\xa5\xb6\xbe\xec\x87" +
	"\x9a\xb8\x9b\xeb\xed\xf1\xdf\x57\x6f\x73\xe6\x3a\x51\xdc\x9f\xe1\x0e\xb9\xef\xbd\x22\xac\xa1\xb8\xe5\xd4\x9a\x56" +
	"\xaa\xeb\xcf\xd1\xa9\x89\xbc\xb1\xf2\x1e\x0c\x9e\x5b\x79\x3b\xd1\xdb\x27\xda\x3a\xd0\x8a\x83\xfd\x4d\xcd\x59\x91" +
	"\x03\x85\x6a\xc4\x44\xca\x08\x68\x2d\xd2\x53\x3d\x94\xb5\x54\xaa\x9a\xb0\x9b\xeb\xc3\xf1\x8a\x5f\x58\x8c\xab\x9a" +
	"\xc8\xd5\x2a\xbe\x81\x67\x85\xed\x08\x25\x16\xde\x70\x72\xd2\x5a\x6e\x21\x92\xdf\xd6\x15\xc2\x23\x27\x62\x77\x88" +
	"\x85\xad\x56\x65\xd7\xb5\x04\x3c\x16\xf9\x99\xe7\x52\x10\x3a\x91\xa9\x59\x26\xb7\x65\xb9\x2a\xd9\x27\xfc\xc6\xb4" +
	"\xbe\xce\xd8\x71\x3f\xc4\x60\xe1\x7b\x7f\x52\xe1\xf6\x79\x69\xc8\x5d\xec\x8c\x85\x03\x87\x05\x2c\x75\x01\xc9\x9c" +
	"\xdc\x3a\x0d\x7a\xb9\x4e\x9e\x37\xe7\xcf\xd2\xec\x8c\x8b\x43\x87\x0b\xf4\x0b\xb8\x93\x23\xba\x7d\x4d\xa8\x67\x9f" +
	"\x76\x06\xf8\xc8\x01\x7c\x88\x19\x88\x22\xf7\xb5\x73\x63\x10\xe6\x0b\x11\x6a\x96\x59\x7a\x2f\xb5\x3d\x19\x32\x96" +
	"\x41\x77\x1f\x9b\x2b\x9c\x38\xbf\x0e\x8f\xb0\x9c\x80\x52\xf2\x6f\xe7\xbc\x40\xb1\x98\x59\x3c\x2f\x35\x27\x0e\x35" +
	"\xc7\x08\x35\x4d\x09\xd0\x5b\xa7\x2b\xcb\x2e\x7d\xa9\xc9\xbc\xb4\xf0\x04\xac\x22\xa5\x89\xb5\xa8\x01\x35\x40\x26" +
	"\x30\x95\xaa\xf4\xbd\x28\xec\xf8\xa3\xb7\x63\x4b\x8e\x31\x35\x6a\xca\x00\xdf\x09\x57\xcb\x85\xf3\x5f\x53\x25\x63" +
	"\x27\x29\xa0\xe0\xd2\x97\x96\xde\x19\x5f\x98\x6e\x61\x69\xf0\x9d\xf1\x54\xcb\x92\x2f\xd8\xa8\xa4\xca\x77\x46\x04" +
	"\x96\x93\x84\x26\xfb\xb7\xbd\xa2\x36\x17\x11\x74\x86\x15\xbb\x82\xaf\x51\xb4\xd0\x12\xf5\x77\x95\x45\x74\x86\x1f" +
	"\x7b\x68\xad\x2c\xc3\xd8\xa2\xe6\xf3\x69\x61\x16\x9e\x96\x22\x8f\xb4\xbc\xda\xf2\xab\x73\x42\xf5\x2e\x34\xe2\x04" +
	"\xbb\x94\xe3\x05\x27\xed\xb2\x86\xf2\x49\x0a\x13\xf0\xc4\x45\x4e\xc5\xf3\xd1\x80\xdd\xca\xbd\x25\x35\x6d\x72\x71" +
	"\x1a\x6a\x74\xb6\x07\xf0\xc4\x79\x76\x9c\xb8\x70\x31\x67\x59\xad\x10\xda\xae\xea\xdb\x0d\xb5\xf3\xe6\xaf\xd2\xc9" +
	"\x22\x53\xfd\x64\xb9\xe4\xee\x59\xc0\x5c\x60\xa5\x18\x0a\x25\x81\x0b\x03\xb3\xfa\x1b\xb2\x42\x02\x5a\x5a\xb5\x23" +
	"\x94\x98\x7f\xab\x16\x76\xa1\x30\xbf\xa4\x54\x18\x4f\x26\x7c\x0d\x27\x56\x0d\x96\x8d\x4e\x05\xcf\x02\x93\xdd\x84" +
	"\xd7\x56\x32\x80\x79\xbd\x6a\xfd\x5a\x5b\x06\xf0\x7a\x38\x87\x01\x16\xef\x9e\x02\xcc\xf1\xb9\x75\x7a\x2d\x8f\x3b" +
	"\x56\xf4\xd7\x15\xc6\x53\xa7\xef\xd4\x79\x3b\x9d\x62\x8e\x0d\x29\x40\x6c\xbb\xf7\x8d\x75\x8d\x8e\x0a\x3c\x5a\x9b" +
	"\xf0\xdc\x0c\x61\x3e\x6f\x75\x01\xe6\x36\x9c\x1f\x87\x6e\x9c\xfa\x4a\xf0\x58\xb0\x69\x65\x19\x69\x1b\xb4\x6b\xd6" +
	"\xa7\xee\x08\x3e\xe6\xf2\xf1\xea\xd8\xb6\xd6\x60\x8d\xb2\xdb\x1d\x61\x3f\x75\x7e\xa1\xb6\xb0\xa9\x04\x78\x3b\x84" +
	"\xac\x53\x62\xbc\x1b\x5e\xde\xa0\x36\xd2\x5b\xe0\xbc\x05\xf8\xab\xaa\xa6\x77\x84\x19\xb3\x7a\xab\x6a\xb6\x5b\x22" +
	"\x5f\xaf\x1c\x7c\x47\xf8\x9b\xb3\xca\x97\xc5\xe8\x5b\xca\xa6\x2e\xa6\xf3\xfc\xeb\x0c\x3b\x42\x8c\x06\xdd\xf1\x0a" +
	"\xfb\x56\xd0\xd7\xaa\xdc\xdf\x11\x76\xcc\xea\xaf\xfa\x77\x03\xda\xf8\xbc\x55\xf3\xee\x1c\xbc\xf3\xbe\x7b\x91\xff" +
	"\xff\xdb\x8b\xff\x06\x00\x00\xff\xff\x9b\x44\x95\xb9\x33\x48\x00\x00")

func bindataAssetsPatientsReportSpecjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsPatientsReportSpecjson,
		"assets/patientsReportSpec.json",
	)
}



func bindataAssetsPatientsReportSpecjson() (*asset, error) {
	bytes, err := bindataAssetsPatientsReportSpecjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/patientsReportSpec.json",
		size: 18483,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533908833, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/encountersReportSpec.json": bindataAssetsEncountersReportSpecjson,
	"assets/patientsReportSpec.json":   bindataAssetsPatientsReportSpecjson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"encountersReportSpec.json": {Func: bindataAssetsEncountersReportSpecjson, Children: map[string]*bintree{}},
		"patientsReportSpec.json": {Func: bindataAssetsPatientsReportSpecjson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
