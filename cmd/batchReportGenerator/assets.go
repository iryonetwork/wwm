// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/encountersReportSpec.json
// assets/patientsReportSpec.json

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsEncountersReportSpecjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xed\x4e\xe3\x38\x14\xfd\xcf\x53\x58\x95\x90\x58\x69\x66\x28\x30" +
	"\x3b\x2b\xf5\x1f\x50\x56\x8d\xb4\x05\xc4\xc7\xec\x0f\x84\x22\x37\xb9\x6d\xac\x8d\xed\x8c\x7d\xc3\x12\x0d\xbc\xd3" +
	"\x3e\xc3\x3e\xd9\xca\x6e\x93\xc6\xf9\xa0\x85\x50\xc1\x6a\xa6\x12\x48\xb9\xbe\x3d\x3e\x3e\xf7\xe4\x3a\x71\xbf\x6f" +
	"\x11\x42\x48\x0f\xb3\x04\x7a\x03\xd2\x03\x11\xc8\x54\x20\x28\xdd\xfb\x30\x1f\x99\xb2\x18\x8e\x29\xc2\x4c\xaa\xcc" +
	"\x64\xc8\x04\x04\x44\x6a\x30\xf8\x7c\x70\xf0\x00\x77\x20\xf0\x21\x4f\x0d\x64\x9c\x72\xa1\x7b\x03\x72\x63\x03\x36" +
	"\x78\x92\x23\x12\x6f\xb8\x48\xb4\xf1\x73\x8a\x0c\x04\x56\xa2\xc7\x31\x13\x2c\xa8\x04\x97\x10\xc8\x38\x94\x47\x0e" +
	"\x53\x8c\x64\x15\x79\x11\x14\xd4\xcd\x1d\x53\x26\x48\x20\x79\x12\x53\x26\xb0\x36\x12\x32\x3a\x13\x52\x33\xed\xd0" +
	"\x31\xe9\xc0\x41\x20\x55\x59\x9e\x02\x4e\xca\x18\x42\x16\x50\x64\x52\x38\xe1\x3f\x81\xcd\x22\x67\x96\x51\x2d\x72" +
	"\x34\xf6\x9c\x4b\x19\x66\x04\x81\x27\xa0\x28\xa6\xca\x21\x7f\x99\x69\x94\x31\x0b\xc8\x24\x96\x32\x24\x89\x02\xad" +
	"\x2b\x29\x43\x46\x57\xe6\x8c\x80\x2a\x24\x8a\xa2\x13\x3d\xbb\xcf\x66\x20\x88\x36\xb3\xda\x95\xf4\xec\xd8\xad\x5b" +
	"\xd6\xcb\x04\x02\x53\xdb\xef\x2d\xb5\x2d\x8f\x38\x9e\x32\x0e\x1a\x03\xd2\xd2\x94\x76\x3c\x04\x1d\x28\x96\xd8\x09" +
	"\x07\xa4\x77\x2d\xd8\xb7\x14\x48\xe1\x40\x62\xbe\x47\x58\x08\x02\xd9\x94\x81\xaa\x7e\x9d\x03\xd2\xdf\x19\xc4\x61" +
	"\x3e\x87\x37\xec\x15\x19\x8f\xcd\x4e\x7b\x25\x8e\xc9\x02\x71\x4d\x72\x8b\xf4\x36\x7e\x4b\xcf\xb7\xd2\xbb\xa3\x71" +
	"\x0a\x2b\xb8\x2d\x60\xda\x39\x41\xa4\xce\x29\x46\x26\x77\x37\x90\x02\xe1\x1e\x77\x23\xa0\x31\x46\x7e\x40\x15\xf8" +
	"\x53\x1a\xb0\x98\x61\xf6\x50\x82\x68\x24\x5c\xb9\x1f\x3b\xb1\xbe\x62\x1c\x88\x9c\x2e\xcb\xbe\x0e\x6b\x10\xa1\x6f" +
	"\xa7\x6e\xa4\xb7\x6c\x0a\x9d\x98\x79\x43\xc3\x0b\x23\x20\xa9\x36\x4b\x8d\x28\x92\x40\x01\x45\x08\x6d\xd4\x35\xea" +
	"\xd3\xb4\x79\x22\x35\xa8\x95\xc2\x96\x3b\x57\x27\xee\xa7\x74\xae\xea\xab\xb2\xb7\xb4\x1a\x79\x57\x5a\x6b\x27\xea" +
	"\xad\x6d\xda\x25\xe6\x84\xed\xd0\xdc\x1d\x02\x6f\xcc\x0e\x75\x32\xba\xf8\x68\xfe\x8e\xcf\xc6\xe7\x67\x97\xde\x95" +
	"\x77\x76\xfa\xa9\x58\xf2\xa7\xbb\xbd\xdb\xc2\x4b\x12\x23\x50\x7e\x7e\xc5\x10\xb8\x76\x10\x4e\xbe\x1e\xfe\x71\x7d" +
	"\x68\x01\x0a\x56\x16\x60\x9e\x4a\xb1\xdf\xef\x2f\xae\xe6\x17\xfb\xb7\x4f\x88\xb4\xdc\x65\x5a\x45\xa2\x4a\xd1\x6c" +
	"\x1d\x91\x0a\x2c\xb2\x33\x65\x4a\x63\x29\xc0\x84\x2d\xb2\x85\x32\x3e\x28\x76\xae\x5f\x56\xde\x5e\x9b\x14\x30\x51" +
	"\x72\x12\x03\xf7\x0b\xa2\x06\xa8\xca\x88\x89\x20\x4e\x43\xf0\x0c\x50\x4d\x25\x9b\xa1\x91\x2a\xe3\xb2\xfe\x87\xfa" +
	"\x18\x08\xd3\x72\xfb\xce\xc0\x63\x65\x86\xa9\x54\x9c\x1a\x80\xde\xb6\x26\x3b\xdb\x7a\x40\xb6\xeb\xc2\x24\x4a\x26" +
	"\xa0\x90\x81\xfb\x3c\x93\x7f\xea\xb4\x9a\xea\x34\x2c\x2a\x12\xd3\x09\xc4\xbd\x3a\x61\xb2\xea\xfe\x68\xac\x54\x48" +
	"\x91\xae\x65\xc0\x16\x09\x5e\xb2\x02\x6f\x48\x10\x14\x67\x42\xc6\x72\x56\x35\xe8\xc6\x96\xb2\xeb\x73\x9a\x24\x4c" +
	"\xcc\x06\xfd\x5d\xa4\x6a\x06\xf8\x50\x66\xb1\x99\x85\xbe\xe1\xe2\x02\x19\x42\xc3\xaa\x9c\xc8\x6d\xf3\x63\x44\xcb" +
	"\xb3\x6a\xa7\x46\xd3\x02\x4a\x76\x68\x1c\x93\x49\x8a\xc4\xe9\x3c\xf0\xa3\x74\x9e\xbd\xd6\xce\xf3\x71\xef\x67\xeb" +
	"\x71\x3f\x3f\x5b\xcf\x73\x16\xfa\xbf\x6c\x3d\xe5\x77\xe0\x4e\xed\xe6\x5c\xd9\xeb\x09\x84\x84\x37\xbe\x57\xd7\x96" +
	"\xb9\x99\xce\xe1\x9d\x5e\x5e\x5d\x5c\x1f\x5b\x84\x25\x11\x5f\xaa\xd0\x00\xed\x6f\xe4\x99\xe5\x19\x9d\x63\x23\x0d" +
	"\x63\x59\xc4\x57\xf3\x20\x0d\x90\xdd\x31\xc3\xab\xf0\x60\x69\xd2\xc2\x8a\x4b\x97\xfe\xd6\x6f\x6a\x20\x6b\x38\x70" +
	"\x71\xdc\xd2\x6a\xbe\x6f\x29\x15\xc8\x70\x95\xff\xe6\x30\x84\x03\xd5\xa9\x82\x90\x84\xa9\x62\x62\xd6\xfe\x72\x9a" +
	"\x0a\x66\x4b\xf2\xd7\xec\xed\x5f\x54\xce\x8e\x2e\x4f\x2e\xbe\xce\xb7\xbb\x89\x0c\x33\xff\x6f\xbb\x18\x63\x57\xdb" +
	"\x0c\x0a\xb9\xed\xa1\xdd\xa2\x22\x07\xb7\x83\x7e\x69\xd4\x7d\xad\xf9\xdc\xf2\x26\x33\x7a\x1d\xb1\x47\x2f\x14\x3b" +
	"\xe0\xef\x4b\xec\xa8\x49\xe7\x3d\x57\xe7\x7d\x57\xe7\x83\xb5\x74\x3e\x1a\x7b\x9d\x45\x3e\x1a\x7b\x2f\xb1\xf3\x2e" +
	"\xdf\x7f\x5f\x22\x5b\x47\x73\xaa\xb5\xcf\x44\x08\xf7\x9b\x50\xbb\x7a\xfc\xda\x59\xfa\x25\x20\x50\x54\x29\xac\x5f" +
	"\x08\x2d\x53\x15\xd8\xb9\x86\xb4\x7e\x28\x99\x97\xe9\xdf\x7f\x8e\xdf\x61\x91\x4a\x12\x6e\xa0\xf7\xb4\x1d\x84\x77" +
	"\x2d\x56\x0b\x2e\x69\x3c\xb2\xca\x0b\xc0\xf9\xcd\x68\x56\x7b\x18\x78\xe3\x1a\x18\xfe\x7e\xce\xdf\xc2\xb4\xde\x27" +
	"\x5f\x5e\x72\x9f\xb4\xfe\xce\xd0\xb5\x04\x6d\xc0\x3f\x70\x0d\x7e\x6d\xdd\x81\x8b\xdf\x71\xba\xef\xc2\x39\xd4\xf3" +
	"\xf7\x89\x49\xf2\xce\xb6\xe2\x24\x8d\x75\x55\xef\xd7\xe8\x3a\xf5\x5f\xc8\xba\xca\x5e\x43\x7c\xbe\xfa\xdb\xef\x50" +
	"\x7b\x5f\xde\x33\x0e\xa8\xb2\xa7\x4d\xff\xe4\x06\xfd\xa5\x5c\x84\xad\xf9\xff\xc7\xad\xff\x02\x00\x00\xff\xff\x62" +
	"\x38\x98\xe2\xa9\x1e\x00\x00")

func bindataAssetsEncountersReportSpecjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsEncountersReportSpecjson,
		"assets/encountersReportSpec.json",
	)
}



func bindataAssetsEncountersReportSpecjson() (*asset, error) {
	bytes, err := bindataAssetsEncountersReportSpecjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/encountersReportSpec.json",
		size: 7849,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1534412366, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsPatientsReportSpecjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xef\x5f\x41\x18\x58\xf4\xfb\x05\xb6\xa9" +
	"\x9d\xdf\xcd\x4b\x91\xd6\xde\xc6\x0f\x69\x83\x24\xb7\x8b\x43\x11\x04\x34\x35\xb6\x78\x91\x48\x95\xa4\x9c\xf3\x6d" +
	"\xfb\xbf\x1f\x28\xc9\x1b\x51\xe2\x58\xae\x65\x39\xed\xe2\x1e\x76\x01\x93\x0c\x39\x9f\x0f\x87\x33\xe4\x68\xa6\x7f" +
	"\xbe\x20\x84\x90\x9e\x59\x24\xd0\x3b\x23\xbd\x84\x1a\x0e\xc2\xe8\xde\xaf\x79\xfb\x94\x47\xf0\x9e\x1a\x98\x49\xb5" +
	"\xb0\xfd\x32\x01\x01\xa1\x3a\x3b\x3b\x3c\x18\x7c\x4d\x40\x69\xae\x0d\x08\xf3\x75\x39\x7e\xa6\x64\x9a\xbc\x5b\x5c" +
	"\xe5\xd3\x8c\x87\xbd\x33\x62\x54\x0a\x45\x2f\x93\x51\x1a\x0b\xdd\x3b\x23\x9f\xb3\x86\xac\xb1\x18\x4b\xc6\xc3\x62" +
	"\x92\xac\xf5\x7d\xc4\x05\x67\x95\xc6\xf3\xd4\x84\x52\xf9\x1b\x05\x8d\xa1\xdc\xfc\x4f\xa0\x8a\xc8\x29\x99\x70\x65" +
	"\x42\x67\x66\x99\x0a\xa3\x16\xde\xbe\x8f\xd4\x70\x29\x68\xc4\xcd\xa2\xdc\xfc\x01\x44\x00\xaa\xdc\x72\x49\x95\xe1" +
	"\x34\x22\xda\x50\x93\xea\x72\xcf\x28\x48\x59\x36\x4b\xb9\xf1\x13\x63\x69\x52\x6b\x2d\x49\x22\x15\x9f\x71\xa7\x73" +
	"\x48\x0d\xd8\x9e\x08\xe8\x9c\x8b\x19\x09\x65\x0c\x84\xe5\x7f\xe1\x1b\x47\x95\xe2\x73\x1a\x95\xbb\x6e\x15\x15\x9a" +
	"\x9b\xe2\xaf\x38\x68\xcf\xe2\xe5\xa6\x6b\x98\x55\x25\x0c\x95\xb4\xdb\x10\x70\x0d\x54\xbb\x13\x8c\xe3\x38\x15\xfc" +
	"\x3f\x19\x2a\xa7\xe3\x3c\x8a\x40\xcd\x2a\xcb\xdd\xa4\x6a\x06\x55\x19\x2e\x21\xe0\xac\x3e\xc1\xc7\x34\x9e\x40\xb6" +
	"\x79\x09\xc8\x24\x02\x12\xf1\x8c\x02\x23\x67\x60\x42\x77\x23\x6a\x63\xb9\x20\x26\x04\x32\xa5\x31\x8f\x1c\x74\x37" +
	"\xb1\x7c\xe0\x62\xe6\x69\x22\x4c\xc6\x31\x08\xe3\x70\x47\xb3\x9e\x40\xa5\x33\x47\xb6\x0b\xaa\xc9\x84\x6a\xce\x48" +
	"\xb8\x98\x71\x10\x40\x14\x68\x99\x2a\xe6\x22\x3b\x67\x0c\xb4\x26\x46\x12\x16\x01\x15\xe4\x91\x1a\x57\xee\x9b\x74" +
	"\x3a\xe5\x2c\x53\xfc\xa9\x94\x01\xd1\x69\x92\xb8\xf2\x7e\xb0\xcd\x34\x49\xc0\x70\xe3\x68\xf6\x05\x50\x53\x01\x32" +
	"\x8a\x80\x19\xc5\x59\x45\x6f\x7f\xa7\x8c\x71\x91\x11\x4c\xa4\x20\x9a\x85\x10\xa4\x11\x10\x6a\x32\x75\xc2\x86\x06" +
	"\x92\xa5\x96\x0f\x4d\xe8\x9c\xf2\x88\x4e\x22\x67\xe8\x2d\x68\x03\x01\x99\x4a\x45\x4c\x3a\x01\xc5\xd2\x48\x6a\xee" +
	"\xc0\xbf\x2d\xb5\x13\x03\xda\x58\x96\xd2\xc8\x61\xf8\x3c\x08\x78\x7e\xda\x9c\x69\xb2\xe1\x9a\x04\x52\x78\xe4\xb3" +
	"\x6c\x53\x96\x29\x0c\xe1\x01\x08\xc3\xa7\x1c\x82\xd5\xe3\x02\x30\x94\x47\x8e\x78\xef\xe8\x64\xf1\xd2\xf6\x44\x7c" +
	"\x0e\x6a\x41\x32\xeb\x57\xea\xbf\x52\x10\x53\x93\x2a\xa8\x5b\x88\x3f\x00\x1e\xb4\x25\xd0\xd3\xc3\x67\xa1\xf1\x76" +
	"\x5d\xe0\x5d\xef\x14\x50\x6d\xa6\x00\x41\x65\x4b\x9d\x0e\x12\xa4\xaa\x66\x3e\xfe\x08\xa9\x21\x81\x04\xab\x90\x93" +
	"\x05\x01\x6a\x08\x15\x01\x09\x14\x17\x0f\x6f\xcb\x03\x7f\x53\xf0\x25\x05\xc1\x72\x9b\x27\x1f\x21\x22\xb1\x9c\x43" +
	"\x5c\x32\xf4\x65\x5a\x74\x04\x90\x10\x4d\x0d\xd7\xd3\x9c\x44\xcf\xa0\xdf\xb9\xa1\x31\x17\x64\x98\x6b\x6e\x36\x59" +
	"\x4d\x42\x3b\x36\x9f\xce\x62\x90\x82\x4c\x28\x7b\x70\x8c\x97\x95\x9e\x8a\xc5\x44\x06\x8b\xa5\x56\x12\x1d\xcb\x07" +
	"\x78\xeb\x3f\xe4\x59\x9f\x72\x4f\xa4\x7c\xcc\x59\x60\x21\x8f\x02\x32\x03\x43\xa8\x92\xa9\x08\xde\xae\x18\x65\x4f" +
	"\x7c\x2a\xac\xf1\x81\xb7\xbd\x6c\xd4\x9d\xeb\xa3\x6e\x12\x60\xd6\x51\xfd\xe9\x75\x54\xe5\x76\x52\xf6\x9f\xd6\x5f" +
	"\x5e\x82\xa1\xa5\xa5\xb3\xfe\x00\x34\x53\x3c\xc9\x08\x3a\x23\xbd\x7f\x08\xfe\x25\x05\x52\x78\xdb\x27\x55\x56\xd5" +
	"\xbf\x8b\xc1\xd0\xdf\x38\x44\x41\xc9\x39\x8f\x87\xbd\xbf\x06\x7d\xf3\xba\x4c\x54\xbc\x39\x8d\x52\x68\x90\xad\x98" +
	"\x06\x97\x09\x42\x75\x45\x4d\x68\xc7\xbe\x66\x52\x18\xf8\xb7\x79\x1d\x02\x8d\x4c\x78\xcf\xa8\x82\xfb\x29\x65\xdc" +
	"\x7a\xd0\xaf\xa5\x29\xbc\x02\x3f\xb9\xf3\x56\x02\x8f\x87\x56\x33\xac\xd1\x4f\x35\x28\x62\xec\xb1\x60\x0a\xa8\x35" +
	"\x52\xb6\x15\x44\xe6\x00\x41\x11\xbb\x3b\xab\xd1\xc4\x89\xd4\xa0\xd6\x95\x3c\xbb\x73\xb4\x92\xfd\x23\x8d\x61\xeb" +
	"\xd2\x67\x62\x79\xe5\x76\x2f\x45\xad\x24\xc7\xee\x57\x7e\x15\x11\xe6\xb3\xbd\x3a\x8e\x2e\xae\x5f\x0d\x47\x97\x9f" +
	"\x3e\x5c\x9f\x5f\x5d\x8c\xdf\xbf\xba\x1a\x5d\xdf\x7c\xfa\xb8\x67\x2f\x92\x52\xec\xcd\x07\x77\xaf\x0b\x6b\xed\x1d" +
	"\x3d\xbe\x1d\x5d\xde\xdf\x5e\x8f\x46\xc5\x1f\xdc\x17\x83\xf7\xe6\x83\xbd\xfe\x5e\xff\xee\x35\x37\x10\xeb\xcf\xd4" +
	"\xf4\xfb\x83\xfe\x1d\x72\x48\xaa\xb7\x3f\x94\x04\x26\x83\xc6\xa3\x82\x5f\x25\x7f\x10\x1a\xf6\x11\x1a\xca\x17\xdd" +
	"\x36\x0c\xf8\x2f\xcc\x8d\xe0\xed\x7f\x25\x18\xb9\x5d\xbb\xe7\x62\x2a\xf7\xe6\x0e\x80\xe3\xfd\xf2\xaf\xc3\x53\x04" +
	"\x4e\x71\x41\x6f\x83\xa4\x76\xc7\xff\x41\x76\xf0\x04\x81\x5c\x79\x81\xb4\x81\x8e\x3e\x66\x7e\x0c\x0a\x0e\x0e\xfe" +
	"\xb7\xeb\x4b\xc9\x9e\x5e\x97\x6d\x50\xfb\xde\xa8\x8d\xc0\x37\x3c\xb3\x47\x98\x25\x2e\xbd\x89\x5b\x39\x22\xef\xdb" +
	"\xba\x33\x34\x98\x05\xaa\xbf\xe5\xb7\xe4\x58\x6a\x91\x81\xae\xa0\x1d\xbe\x41\xa0\xad\x8c\x44\xb4\xda\xba\x35\x63" +
	"\x1c\x9d\x6d\x66\x13\xe2\x65\x4c\x65\x2b\x20\xeb\x01\x9a\xae\x70\x1d\x0f\x10\x5c\xf5\x80\x50\x2b\x64\xab\xe2\x4b" +
	"\x9d\x61\x6b\xb8\xd8\x6d\xe3\xd8\xa1\x30\x9c\xe6\xac\xeb\x3b\xdd\x83\x1d\x4d\x99\xf1\xfb\x87\xf3\xe1\xf0\x7a\x74" +
	"\x73\xb3\x47\x83\x40\x81\xb6\x6e\xe1\xee\xac\xff\x97\x47\xb1\xe0\xfb\x83\x32\x15\x7d\x87\x98\x3e\xa6\xcc\x45\x54" +
	"\xaf\xd5\x4e\xd7\x22\x83\x8d\xdb\xbb\x4b\x1e\xb0\xfb\x41\x63\x1c\xb1\xdd\xd3\xad\x36\x7b\x61\xc5\x3c\x61\xca\x8e" +
	"\x4e\xc3\xa0\x8f\x9d\x86\x86\xb0\xe8\x76\x81\x63\x21\xd7\xce\x50\xa3\x4e\xb8\x1a\xae\x46\x71\x52\xa5\x68\x4d\xd4" +
	"\xaa\x35\xc0\x83\xdf\xdb\x43\x36\x38\xba\xab\xce\xcb\x05\x8b\xd2\x00\xc6\x76\x4c\x0d\x41\x36\x42\x1b\xaa\x4c\xef" +
	"\x8c\xf4\x7f\xad\xf7\x81\x08\x7a\x67\xe4\xd5\xc0\xe9\xf9\x56\x59\x62\x2a\x55\x4c\xed\x0c\xbd\x5f\x34\xf9\xbf\x5f" +
	"\xf4\xff\x57\x65\x48\x94\x4c\x40\x99\xdc\x45\x7c\xae\xad\x52\x97\xc9\x47\xe0\x30\x27\xae\x57\x97\x92\x34\xe9\x9c" +
	"\x97\xe4\x12\x6b\x65\x0d\x40\x40\x7e\x87\x9c\xd4\x74\x22\xe4\x89\x4f\x48\xa7\xe5\xce\xab\xc6\xee\x97\x95\x56\x3a" +
	"\x8c\x7d\xa4\xa9\x89\xbd\xb9\x02\x1f\xfe\x7d\x15\xb8\xcc\x5e\x17\x0a\xf2\xe6\x27\xd0\xe2\xfd\xc1\x86\x5a\xfc\xf4" +
	"\x19\xb0\x95\x06\xfb\xbe\x26\xd6\xc4\xdd\x58\x7b\xed\xad\xe9\x79\xb5\xb7\x13\xc5\xcd\x49\xab\x52\x5b\xe3\x7f\x13" +
	"\x9d\xed\x6f\x6a\xd4\xc4\xbf\xd2\xd5\x4f\x8e\xb5\xec\xd9\x72\x96\x2e\x94\x61\x7f\xff\xb9\x95\xa1\x43\x53\x66\x89" +
	"\xeb\x42\x21\xf6\x0f\x7e\x06\x23\x76\xb8\xa1\xd6\x3e\xa5\x2d\xb4\x52\x5b\x5f\xf6\x43\x4d\xdc\xcd\xf5\xf6\xf8\xef" +
	"\xab\xb7\x39\x73\x9d\x28\xee\xcf\x70\x87\xdc\xf7\x5e\x11\xd6\x50\xdc\x72\x6a\x4d\x2b\xd5\xf5\xe7\xe8\xd4\x44\xde" +
	"\x58\x79\x0f\x06\xcf\xad\xbc\x9d\xe8\xed\x13\x6d\x1d\x68\xc5\xc1\xfe\xa6\xe6\xac\xc8\x81\x42\x35\x62\x22\x65\x04" +
	"\xb4\x16\xe9\xa9\x1e\xca\x5a\x2a\x55\x4d\xd8\xcd\xf5\xe1\x78\xc5\x2f\x2c\xc6\x55\x4d\xe4\x6a\x15\xdf\xc0\xb3\xc2" +
	"\x76\x84\x12\x0b\x6f\x38\x39\x69\x2d\xb7\x10\xc9\x6f\xeb\x0a\xe1\x91\x13\xb1\x3b\xc4\xc2\x56\xab\xb2\xeb\x5a\x02" +
	"\x1e\x8b\xfc\xcc\x73\x29\x08\x9d\xc8\xd4\x2c\x93\xdb\xb2\x5c\x95\xec\x13\x7e\x63\x5a\x5f\x67\xec\xb8\x1f\x62\xb0" +
	"\xf0\xbd\x3f\xa9\x70\xfb\xbc\x34\xe4\x2e\x76\xc6\xc2\x81\xc3\x02\x96\xba\x80\x64\x4e\x6e\x9d\x06\xbd\x5c\x27\xcf" +
	"\x9b\xf3\x67\x69\x76\xc6\xc5\xa1\xc3\x05\xfa\x05\xdc\xc9\x11\xdd\xbe\x26\xd4\xb3\x4f\x3b\x03\x7c\xe4\x00\x3e\xc4" +
	"\x0c\x44\x91\xfb\xda\xb9\x31\x08\xf3\x85\x08\x35\xcb\x2c\xbd\x97\xda\x9e\x0c\x19\xcb\xa0\xbb\x8f\xcd\x15\x4e\x9c" +
	"\x5f\x87\x47\x58\x4e\x40\x29\xf9\xb7\x73\x5e\xa0\x58\xcc\x2c\x9e\x97\x9a\x13\x87\x9a\x63\x84\x9a\xa6\x04\xe8\xad" +
	"\xd3\x95\x65\x97\xbe\xd4\x64\x5e\x5a\x78\x02\x56\x91\xd2\xc4\x5a\xd4\x80\x1a\x20\x13\x98\x4a\x55\xfa\x5e\x14\x76" +
	"\xfc\xd1\xdb\xb1\x25\xc7\x98\x1a\x35\x65\x80\xef\x84\xab\xe5\xc2\xf9\xaf\xa9\x92\xb1\x93\x14\x50\x70\xe9\x4b\x4b" +
	"\xef\x8c\x2f\x4c\xb7\xb0\x34\xf8\xce\x78\xaa\x65\xc9\x17\x6c\x54\x52\xe5\x3b\x23\x02\xcb\x49\x42\x93\xfd\xdb\x5e" +
	"\x51\x9b\x8b\x08\x3a\xc3\x8a\x5d\xc1\xd7\x28\x5a\x68\x89\xfa\xbb\xca\x22\x3a\xc3\x8f\x3d\xb4\x56\x96\x61\x6c\x51" +
	"\xf3\xf9\xb4\x30\x0b\x4f\x4b\x91\x47\x5a\x5e\x6d\xf9\xd5\x39\xa1\x7a\x17\x1a\x71\x82\x5d\xca\xf1\x82\x93\x76\x59" +
	"\x43\xf9\x24\x85\x09\x78\xe2\x22\xa7\xe2\xf9\x68\xc0\x6e\xe5\xde\x92\x9a\x36\xb9\x38\x0d\x35\x3a\xdb\x03\x78\xe2" +
	"\x3c\x3b\x4e\x5c\xb8\x98\xb3\xac\x56\x08\x6d\x57\xf5\xed\x86\xda\x79\xf3\x57\xe9\x64\x91\xa9\x7e\xb2\x5c\x72\xf7" +
	"\x2c\x60\x2e\xb0\x52\x0c\x85\x92\xc0\x85\x81\x59\xfd\x0d\x59\x21\x01\x2d\xad\xda\x11\x4a\xcc\xbf\x55\x0b\xbb\x50" +
	"\x98\x5f\x52\x2a\x8c\x27\x13\xbe\x86\x13\xab\x06\xcb\x46\xa7\x82\x67\x81\xc9\x6e\xc2\x6b\x2b\x19\xc0\xbc\x5e\xb5" +
	"\x7e\xad\x2d\x03\x78\x3d\x9c\xc3\x00\x8b\x77\x4f\x01\xe6\xf8\xdc\x3a\xbd\x96\xc7\x1d\x2b\xfa\xeb\x0a\xe3\xa9\xd3" +
	"\x77\xea\xbc\x9d\x4e\x31\xc7\x86\x14\x20\xb6\xdd\xfb\xc6\xba\x46\x47\x05\x1e\xad\x4d\x78\x6e\x86\x30\x9f\xb7\xba" +
	"\x00\x73\x1b\xce\x8f\x43\x37\x4e\x7d\x25\x78\x2c\xd8\xb4\xb2\x8c\xb4\x0d\xda\x35\xeb\x53\x77\x04\x1f\x73\xf9\x78" +
	"\x75\x6c\x5b\x6b\xb0\x46\xd9\xed\x8e\xb0\x9f\x3a\xbf\x50\x5b\xd8\x54\x02\xbc\x1d\x42\xd6\x29\x31\xde\x0d\x2f\x6f" +
	"\x50\x1b\xe9\x2d\x70\xde\x02\xfc\x55\x55\xd3\x3b\xc2\x8c\x59\xbd\x55\x35\xdb\x2d\x91\xaf\x57\x0e\xbe\x23\xfc\xcd" +
	"\x59\xe5\xcb\x62\xf4\x2d\x65\x53\x17\xd3\x79\xfe\x75\x86\x1d\x21\x46\x83\xee\x78\x85\x7d\x2b\xe8\x6b\x55\xee\xef" +
	"\x08\x3b\x66\xf5\x57\xfd\xbb\x01\x6d\x7c\xde\xaa\x79\x77\x0e\xde\x79\xdf\xbd\xc8\xff\xff\xed\xc5\x7f\x03\x00\x00" +
	"\xff\xff\x7e\xff\xa3\x40\x1b\x48\x00\x00")

func bindataAssetsPatientsReportSpecjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsPatientsReportSpecjson,
		"assets/patientsReportSpec.json",
	)
}



func bindataAssetsPatientsReportSpecjson() (*asset, error) {
	bytes, err := bindataAssetsPatientsReportSpecjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/patientsReportSpec.json",
		size: 18459,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1534412366, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/encountersReportSpec.json": bindataAssetsEncountersReportSpecjson,
	"assets/patientsReportSpec.json":   bindataAssetsPatientsReportSpecjson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"encountersReportSpec.json": {Func: bindataAssetsEncountersReportSpecjson, Children: map[string]*bintree{}},
		"patientsReportSpec.json": {Func: bindataAssetsPatientsReportSpecjson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
