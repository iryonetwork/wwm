// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/sanitizerConfig.json

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsSanitizerConfigjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x98\x61\x4f\xe2\x4c\x10\xc7\xdf\xf3\x29\x36\x7d\xf5\x3c\x89\x42\x41" +
	"\x9e\x3c\x91\x77\x04\x9a\x93\x44\x81\x94\x6a\x62\x90\x90\xb5\x3b\xc8\x26\xed\x6e\xb3\x3b\x70\x9a\x3b\xbf\xfb\x65" +
	"\x97\x56\xdb\xb3\x08\x9e\xd5\x13\x12\x48\x96\xce\x0e\x33\xbf\xf9\xef\x74\xca\xb4\x46\x08\x21\x3f\xec\xa7\x79\x39" +
	"\x0c\x74\xa8\x78\x82\x5c\x0a\xa7\x43\x9c\x05\x57\x1a\x89\xa0\x31\x38\x47\xcf\x46\xf8\x90\x80\xb9\xba\xa6\xd1\xaa" +
	"\x70\x01\x96\x6a\x4c\x71\x69\xae\x35\x42\x29\x10\x04\x4e\x65\x02\xc2\x3b\xf3\x8f\xfb\xde\xc5\xe8\x9b\xdf\x1d\x9f" +
	"\x0d\x7a\xc7\x63\xcf\x9f\x8c\x86\xf5\x04\x94\x96\xa2\xbe\x6e\xce\x1a\x9c\x81\x40\x8e\x1c\x74\xf9\x86\xae\x1f\x5c" +
	"\xcf\x07\x7d\x6f\x18\x0c\x82\xeb\x74\xe3\xdc\xc4\x65\x77\x33\x40\xca\x23\x3d\xa5\xe8\xba\xae\xf1\x86\x10\xa7\xab" +
	"\xd6\xac\x10\xb9\xa2\x42\x2f\xa4\x8a\x69\x96\x21\x88\x50\x3d\x24\xe8\x58\x9b\xc7\xa3\x1d\x3c\x22\x7a\xe0\x38\x4e" +
	"\x2a\xc5\xc1\x38\xbd\x13\x52\x83\x2e\xc3\x41\x95\xa2\x0f\xfb\xe2\x30\xef\xde\xe8\x62\x3c\x9a\x0c\x82\xc1\x68\x58" +
	"\x07\x11\xca\x95\x40\x50\x36\x21\x6b\x7d\x8f\x0d\x89\x4b\x50\xf3\x6c\xb5\x49\x2b\xef\xc1\xbb\xea\x9e\x5f\x76\xad" +
	"\x83\x44\xc9\xdb\x08\xe2\x79\x1a\x22\xd7\xc6\x51\x3e\x9a\x44\xc9\x04\x94\x41\xec\x74\xc8\xf4\xe9\xfb\x62\xc2\xdb" +
	"\x12\x0f\x65\x1c\x83\xc0\x9c\xbf\x9d\x6a\x28\xc5\xc0\x28\xd2\x7c\x79\xd2\x62\x6d\x16\xa7\xb3\x52\xff\x2f\x6a\xa6" +
	"\x20\x96\x6b\x70\x0a\xa6\x8f\x4f\xab\xd9\x7e\xa5\x8c\x81\xf1\xd0\xba\xfc\x2a\xc5\x1c\x0c\x27\x81\x7f\xd9\xb3\x1e" +
	"\x9e\xa3\x9b\x4b\xc5\x8c\xa3\xd6\xd7\x2b\x26\x0d\x91\xaf\x37\x87\x36\x2b\x66\xee\x97\xb2\x76\x94\x2b\x77\xbb\xfd" +
	"\xa9\x15\xa6\x5c\x90\x50\xc6\x49\x44\xb9\x40\xf2\x32\xeb\x3f\x6b\x64\x95\x9f\xdc\xa7\x10\x37\x9d\x70\xcb\xe1\xd8" +
	"\xd5\xc8\xf2\xc8\x76\xa2\xa1\x8c\x29\xd0\xa5\xc2\xdf\xce\xa2\x50\x8d\xb7\x36\x78\x63\x4d\x43\x2c\x6f\xef\xdd\x7e" +
	"\xdf\xf7\x26\x93\x7a\x1a\x96\xd9\xd0\x71\x5f\xef\xea\x05\x4e\xa7\x55\xb2\x31\x20\x88\x5c\x90\x34\x18\xf2\x4f\xb2" +
	"\x94\x02\xfe\x2d\x63\xb5\xe0\xf7\xc0\xae\xaa\xbb\x0b\xee\x05\x09\x22\x08\x51\x49\xc1\xc3\xb9\x91\xf4\x4a\xa4\x8d" +
	"\xa2\xbe\x6e\xd6\xdd\xba\x3b\xeb\x34\x1b\xe6\xc6\x68\xd1\x34\xdb\x55\x92\xb1\x20\xbe\x9a\x66\xf6\xc0\xf1\x8a\x90" +
	"\xfe\xff\x50\xe5\x40\x4c\x79\x74\x40\xca\x69\x7d\x94\x72\x2c\x88\x83\x53\x4e\xeb\xef\x29\xe7\xfb\x92\xa2\xa6\x49" +
	"\x72\x40\xe2\x39\xc9\x89\xa7\xd2\x9b\x55\xc6\xe2\xe0\xf4\x73\xf2\x69\xfa\x61\x32\x5c\x99\xe1\xe6\x8d\xa3\xec\xbb" +
	"\x18\x65\xb9\x95\x59\x0f\x02\xef\x62\x1e\xf8\x9e\x97\x3d\xaa\xa5\xc6\x19\x9a\x3c\x88\xff\x66\xbf\x8d\x47\x79\x47" +
	"\xbd\xf3\xcb\x49\xe0\xf9\x99\x9b\xcd\x63\xe2\x82\xa7\xc3\xd6\xf3\x74\x54\xe1\xa3\x0e\x67\xef\x1d\x8c\x7f\x6e\x71" +
	"\xb1\xdf\x98\x7b\xf4\xc6\x78\x6d\x64\xef\x8d\xf8\xc6\x9a\xdf\x38\x9f\x38\x9e\x33\x8a\xb6\xe7\xdd\x72\x85\xcb\x0f" +
	"\xfe\x7b\xa1\x22\xad\x36\xdd\x1d\x87\x56\xaf\x6e\x35\x2a\x2e\xee\xb6\x9b\x8d\xa9\xa2\x31\x20\x28\xa3\xcd\x62\x75" +
	"\x1d\x8d\x54\xa1\xd3\x21\x6e\xb1\x0a\x0e\x08\xe6\x74\x48\xbb\x56\x64\xfd\x58\x9b\xd5\x7e\x05\x00\x00\xff\xff\x34" +
	"\x4d\x26\xa1\xd0\x12\x00\x00")

func bindataAssetsSanitizerConfigjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSanitizerConfigjson,
		"assets/sanitizerConfig.json",
	)
}



func bindataAssetsSanitizerConfigjson() (*asset, error) {
	bytes, err := bindataAssetsSanitizerConfigjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/sanitizerConfig.json",
		size: 4816,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1533908833, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/sanitizerConfig.json": bindataAssetsSanitizerConfigjson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"sanitizerConfig.json": {Func: bindataAssetsSanitizerConfigjson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
